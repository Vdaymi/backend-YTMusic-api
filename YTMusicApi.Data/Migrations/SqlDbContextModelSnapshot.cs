// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YTMusicApi.Data;

#nullable disable

namespace YTMusicApi.Data.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    partial class SqlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("YTMusicApi.Data.Playlist.PlaylistDao", b =>
                {
                    b.Property<string>("PlaylistId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("playlist_id");

                    b.Property<int?>("ItemCount")
                        .HasColumnType("int")
                        .HasColumnName("item_count");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<string>("СhannelTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("channel_title");

                    b.HasKey("PlaylistId");

                    b.ToTable("playlists");
                });

            modelBuilder.Entity("YTMusicApi.Data.PlaylistTrack.PlaylistTrackDao", b =>
                {
                    b.Property<string>("PlaylistId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("playlist_id")
                        .HasColumnOrder(0);

                    b.Property<string>("TrackId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("track_id")
                        .HasColumnOrder(1);

                    b.HasKey("PlaylistId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("playlist_tracks");
                });

            modelBuilder.Entity("YTMusicApi.Data.Track.TrackDao", b =>
                {
                    b.Property<string>("TrackId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("track_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("ChannelTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("channel_title");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time")
                        .HasColumnName("duration");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.Property<long?>("LikeCount")
                        .HasColumnType("bigint")
                        .HasColumnName("like_count");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<long?>("ViewCount")
                        .HasColumnType("bigint")
                        .HasColumnName("view_count");

                    b.HasKey("TrackId");

                    b.ToTable("tracks");
                });

            modelBuilder.Entity("YTMusicApi.Data.User.UserDao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("YTMusicApi.Data.UserPlaylist.UserPlaylistDao", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<string>("PlaylistId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("playlist_id");

                    b.HasKey("UserId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("user_playlists");
                });

            modelBuilder.Entity("YTMusicApi.Data.PlaylistTrack.PlaylistTrackDao", b =>
                {
                    b.HasOne("YTMusicApi.Data.Playlist.PlaylistDao", "Playlist")
                        .WithMany("PlaylistTracks")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YTMusicApi.Data.Track.TrackDao", "Track")
                        .WithMany("PlaylistTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("YTMusicApi.Data.UserPlaylist.UserPlaylistDao", b =>
                {
                    b.HasOne("YTMusicApi.Data.Playlist.PlaylistDao", "Playlist")
                        .WithMany("UserPlaylists")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YTMusicApi.Data.User.UserDao", "User")
                        .WithMany("UserPlaylists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YTMusicApi.Data.Playlist.PlaylistDao", b =>
                {
                    b.Navigation("PlaylistTracks");

                    b.Navigation("UserPlaylists");
                });

            modelBuilder.Entity("YTMusicApi.Data.Track.TrackDao", b =>
                {
                    b.Navigation("PlaylistTracks");
                });

            modelBuilder.Entity("YTMusicApi.Data.User.UserDao", b =>
                {
                    b.Navigation("UserPlaylists");
                });
#pragma warning restore 612, 618
        }
    }
}
